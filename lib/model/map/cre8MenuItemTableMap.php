<?php


/**
 * This class defines the structure of the 'cre8_menu_item' table.
 *
 *
 * This class was autogenerated by Propel 1.5.0-dev on:
 *
 * Å›ro, 27 sty 2010, 13:26:48
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    propel.generator.plugins.cre8CmsMenuPlugin.lib.model.map
 */
class cre8MenuItemTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'plugins.cre8CmsMenuPlugin.lib.model.map.cre8MenuItemTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('cre8_menu_item');
		$this->setPhpName('cre8MenuItem');
		$this->setClassname('cre8MenuItem');
		$this->setPackage('plugins.cre8CmsMenuPlugin.lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
		$this->addColumn('LEFT', 'Left', 'INTEGER', false, null, null);
		$this->addColumn('RIGHT', 'Right', 'INTEGER', false, null, null);
		$this->addColumn('TREE_LEVEL', 'TreeLevel', 'INTEGER', false, null, null);
		$this->addColumn('LABEL', 'Label', 'VARCHAR', true, 255, null);
		$this->addColumn('CUSTOM_PATH', 'CustomPath', 'VARCHAR', false, 255, null);
		$this->addForeignKey('CONTENT_ID', 'ContentId', 'INTEGER', 'cre8_content', 'ID', false, null, null);
		$this->addColumn('IS_PRIMARY', 'IsPrimary', 'BOOLEAN', false, null, false);
		$this->addColumn('DATE_PUBLISHED', 'DatePublished', 'TIMESTAMP', false, null, null);
		$this->addColumn('DELETED_AT', 'DeletedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('SLUG', 'Slug', 'VARCHAR', false, 255, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('cre8Content', 'cre8Content', RelationMap::MANY_TO_ONE, array('content_id' => 'id', ), 'SET NULL', null);
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'nested_set' => array('left_column' => 'left', 'right_column' => 'right', 'level_column' => 'tree_level', 'use_scope' => 'false', 'scope_column' => 'tree_scope', 'method_proxies' => 'false', ),
			'soft_delete' => array('deleted_column' => 'deleted_at', ),
			'sluggable' => array('slug_column' => 'slug', 'slug_pattern' => '', 'replace_pattern' => '/\W+/', 'replacement' => '-', 'separator' => '-', ),
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // cre8MenuItemTableMap
