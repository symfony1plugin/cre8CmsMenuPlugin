<?php


/**
 * Base class that represents a query for the 'cre8_content' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.0-dev on:
 *
 * Å›ro, 27 sty 2010, 13:26:48
 *
 * @method     cre8ContentQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     cre8ContentQuery orderByContentTypeId($order = Criteria::ASC) Order by the content_type_id column
 * @method     cre8ContentQuery orderByDatePublished($order = Criteria::ASC) Order by the date_published column
 * @method     cre8ContentQuery orderByCustomPath($order = Criteria::ASC) Order by the custom_path column
 * @method     cre8ContentQuery orderByTheme($order = Criteria::ASC) Order by the theme column
 * @method     cre8ContentQuery orderByTemplate($order = Criteria::ASC) Order by the template column
 * @method     cre8ContentQuery orderByModule($order = Criteria::ASC) Order by the module column
 * @method     cre8ContentQuery orderByAction($order = Criteria::ASC) Order by the action column
 * @method     cre8ContentQuery orderByPageTitle($order = Criteria::ASC) Order by the page_title column
 * @method     cre8ContentQuery orderByMetaKeywords($order = Criteria::ASC) Order by the meta_keywords column
 * @method     cre8ContentQuery orderByMetaDescription($order = Criteria::ASC) Order by the meta_description column
 * @method     cre8ContentQuery orderBySlug($order = Criteria::ASC) Order by the slug column
 * @method     cre8ContentQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     cre8ContentQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     cre8ContentQuery groupById() Group by the id column
 * @method     cre8ContentQuery groupByContentTypeId() Group by the content_type_id column
 * @method     cre8ContentQuery groupByDatePublished() Group by the date_published column
 * @method     cre8ContentQuery groupByCustomPath() Group by the custom_path column
 * @method     cre8ContentQuery groupByTheme() Group by the theme column
 * @method     cre8ContentQuery groupByTemplate() Group by the template column
 * @method     cre8ContentQuery groupByModule() Group by the module column
 * @method     cre8ContentQuery groupByAction() Group by the action column
 * @method     cre8ContentQuery groupByPageTitle() Group by the page_title column
 * @method     cre8ContentQuery groupByMetaKeywords() Group by the meta_keywords column
 * @method     cre8ContentQuery groupByMetaDescription() Group by the meta_description column
 * @method     cre8ContentQuery groupBySlug() Group by the slug column
 * @method     cre8ContentQuery groupByCreatedAt() Group by the created_at column
 * @method     cre8ContentQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     cre8Content findOne(PropelPDO $con = null) Return the first cre8Content matching the query
 * @method     cre8Content findOneById(int $id) Return the first cre8Content filtered by the id column
 * @method     cre8Content findOneByContentTypeId(int $content_type_id) Return the first cre8Content filtered by the content_type_id column
 * @method     cre8Content findOneByDatePublished(string $date_published) Return the first cre8Content filtered by the date_published column
 * @method     cre8Content findOneByCustomPath(string $custom_path) Return the first cre8Content filtered by the custom_path column
 * @method     cre8Content findOneByTheme(string $theme) Return the first cre8Content filtered by the theme column
 * @method     cre8Content findOneByTemplate(string $template) Return the first cre8Content filtered by the template column
 * @method     cre8Content findOneByModule(string $module) Return the first cre8Content filtered by the module column
 * @method     cre8Content findOneByAction(string $action) Return the first cre8Content filtered by the action column
 * @method     cre8Content findOneByPageTitle(string $page_title) Return the first cre8Content filtered by the page_title column
 * @method     cre8Content findOneByMetaKeywords(string $meta_keywords) Return the first cre8Content filtered by the meta_keywords column
 * @method     cre8Content findOneByMetaDescription(string $meta_description) Return the first cre8Content filtered by the meta_description column
 * @method     cre8Content findOneBySlug(string $slug) Return the first cre8Content filtered by the slug column
 * @method     cre8Content findOneByCreatedAt(string $created_at) Return the first cre8Content filtered by the created_at column
 * @method     cre8Content findOneByUpdatedAt(string $updated_at) Return the first cre8Content filtered by the updated_at column
 *
 * @method     array findById(int $id) Return cre8Content objects filtered by the id column
 * @method     array findByContentTypeId(int $content_type_id) Return cre8Content objects filtered by the content_type_id column
 * @method     array findByDatePublished(string $date_published) Return cre8Content objects filtered by the date_published column
 * @method     array findByCustomPath(string $custom_path) Return cre8Content objects filtered by the custom_path column
 * @method     array findByTheme(string $theme) Return cre8Content objects filtered by the theme column
 * @method     array findByTemplate(string $template) Return cre8Content objects filtered by the template column
 * @method     array findByModule(string $module) Return cre8Content objects filtered by the module column
 * @method     array findByAction(string $action) Return cre8Content objects filtered by the action column
 * @method     array findByPageTitle(string $page_title) Return cre8Content objects filtered by the page_title column
 * @method     array findByMetaKeywords(string $meta_keywords) Return cre8Content objects filtered by the meta_keywords column
 * @method     array findByMetaDescription(string $meta_description) Return cre8Content objects filtered by the meta_description column
 * @method     array findBySlug(string $slug) Return cre8Content objects filtered by the slug column
 * @method     array findByCreatedAt(string $created_at) Return cre8Content objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return cre8Content objects filtered by the updated_at column
 *
 * @package    propel.generator.plugins.cre8CmsMenuPlugin.lib.model.om
 */
abstract class Basecre8ContentQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of Basecre8ContentQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'cre8Content', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($this->getFormatter()->isObjectFormatter() && (null !== ($obj = cre8ContentPeer::getInstanceFromPool((string) $key)))) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$this->add(cre8ContentPeer::ID, $key, Criteria::EQUAL);
			return $this->findOne($con);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$this->add(cre8ContentPeer::ID, $keys, Criteria::IN);
		
		return $this->find($con);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterById($id = null)
	{
		if (is_array($id)) {
			return $this->addUsingAlias(cre8ContentPeer::ID, $id, Criteria::IN);
		} else {
			return $this->addUsingAlias(cre8ContentPeer::ID, $id, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the content_type_id column
	 * 
	 * @param     int|array $content_type_id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterByContentTypeId($contentTypeId = null)
	{
		if (is_array($contentTypeId)) {
			if (array_values($contentTypeId) === $contentTypeId) {
				return $this->addUsingAlias(cre8ContentPeer::CONTENT_TYPE_ID, $contentTypeId, Criteria::IN);
			} else {
				if (isset($contentTypeId['min'])) {
					$this->addUsingAlias(cre8ContentPeer::CONTENT_TYPE_ID, $contentTypeId['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($contentTypeId['max'])) {
					$this->addUsingAlias(cre8ContentPeer::CONTENT_TYPE_ID, $contentTypeId['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(cre8ContentPeer::CONTENT_TYPE_ID, $contentTypeId, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the date_published column
	 * 
	 * @param     string|array $date_published The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterByDatePublished($datePublished = null)
	{
		if (is_array($datePublished)) {
			if (array_values($datePublished) === $datePublished) {
				return $this->addUsingAlias(cre8ContentPeer::DATE_PUBLISHED, $datePublished, Criteria::IN);
			} else {
				if (isset($datePublished['min'])) {
					$this->addUsingAlias(cre8ContentPeer::DATE_PUBLISHED, $datePublished['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($datePublished['max'])) {
					$this->addUsingAlias(cre8ContentPeer::DATE_PUBLISHED, $datePublished['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(cre8ContentPeer::DATE_PUBLISHED, $datePublished, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the custom_path column
	 * 
	 * @param     string $custom_path The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterByCustomPath($customPath = null)
	{
		if(preg_match('/[\%\*]/', $customPath)) {
			return $this->addUsingAlias(cre8ContentPeer::CUSTOM_PATH, str_replace('*', '%', $customPath), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentPeer::CUSTOM_PATH, $customPath, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the theme column
	 * 
	 * @param     string $theme The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterByTheme($theme = null)
	{
		if(preg_match('/[\%\*]/', $theme)) {
			return $this->addUsingAlias(cre8ContentPeer::THEME, str_replace('*', '%', $theme), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentPeer::THEME, $theme, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the template column
	 * 
	 * @param     string $template The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterByTemplate($template = null)
	{
		if(preg_match('/[\%\*]/', $template)) {
			return $this->addUsingAlias(cre8ContentPeer::TEMPLATE, str_replace('*', '%', $template), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentPeer::TEMPLATE, $template, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the module column
	 * 
	 * @param     string $module The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterByModule($module = null)
	{
		if(preg_match('/[\%\*]/', $module)) {
			return $this->addUsingAlias(cre8ContentPeer::MODULE, str_replace('*', '%', $module), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentPeer::MODULE, $module, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the action column
	 * 
	 * @param     string $action The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterByAction($action = null)
	{
		if(preg_match('/[\%\*]/', $action)) {
			return $this->addUsingAlias(cre8ContentPeer::ACTION, str_replace('*', '%', $action), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentPeer::ACTION, $action, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the page_title column
	 * 
	 * @param     string $page_title The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterByPageTitle($pageTitle = null)
	{
		if(preg_match('/[\%\*]/', $pageTitle)) {
			return $this->addUsingAlias(cre8ContentPeer::PAGE_TITLE, str_replace('*', '%', $pageTitle), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentPeer::PAGE_TITLE, $pageTitle, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the meta_keywords column
	 * 
	 * @param     string $meta_keywords The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterByMetaKeywords($metaKeywords = null)
	{
		if(preg_match('/[\%\*]/', $metaKeywords)) {
			return $this->addUsingAlias(cre8ContentPeer::META_KEYWORDS, str_replace('*', '%', $metaKeywords), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentPeer::META_KEYWORDS, $metaKeywords, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the meta_description column
	 * 
	 * @param     string $meta_description The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterByMetaDescription($metaDescription = null)
	{
		if(preg_match('/[\%\*]/', $metaDescription)) {
			return $this->addUsingAlias(cre8ContentPeer::META_DESCRIPTION, str_replace('*', '%', $metaDescription), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentPeer::META_DESCRIPTION, $metaDescription, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the slug column
	 * 
	 * @param     string $slug The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterBySlug($slug = null)
	{
		if(preg_match('/[\%\*]/', $slug)) {
			return $this->addUsingAlias(cre8ContentPeer::SLUG, str_replace('*', '%', $slug), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentPeer::SLUG, $slug, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the created_at column
	 * 
	 * @param     string|array $created_at The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterByCreatedAt($createdAt = null)
	{
		if (is_array($createdAt)) {
			if (array_values($createdAt) === $createdAt) {
				return $this->addUsingAlias(cre8ContentPeer::CREATED_AT, $createdAt, Criteria::IN);
			} else {
				if (isset($createdAt['min'])) {
					$this->addUsingAlias(cre8ContentPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($createdAt['max'])) {
					$this->addUsingAlias(cre8ContentPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(cre8ContentPeer::CREATED_AT, $createdAt, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the updated_at column
	 * 
	 * @param     string|array $updated_at The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterByUpdatedAt($updatedAt = null)
	{
		if (is_array($updatedAt)) {
			if (array_values($updatedAt) === $updatedAt) {
				return $this->addUsingAlias(cre8ContentPeer::UPDATED_AT, $updatedAt, Criteria::IN);
			} else {
				if (isset($updatedAt['min'])) {
					$this->addUsingAlias(cre8ContentPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($updatedAt['max'])) {
					$this->addUsingAlias(cre8ContentPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(cre8ContentPeer::UPDATED_AT, $updatedAt, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query by a related cre8ContentType object
	 *
	 * @param     cre8ContentType $cre8ContentType  the related object to use as filter
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterBycre8ContentType($cre8ContentType)
	{
		return $this
			->addUsingAlias(cre8ContentPeer::CONTENT_TYPE_ID, $cre8ContentType->getId(), Criteria::EQUAL);
	}

	/**
	 * Use the cre8ContentType relation cre8ContentType object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                  to be used as main alias in the secondary query
	 *
	 * @return    cre8ContentTypeQuery A secondary query class using the current class as primary query
	 */
	public function usecre8ContentTypeQuery($relationAlias = '')
	{
		return $this
			->join($this->getModelAliasOrName() . '.cre8ContentType' . ($relationAlias ? ' ' . $relationAlias : ''))
			->useQuery($relationAlias ? $relationAlias : 'cre8ContentType', 'cre8ContentTypeQuery');
	}

	/**
	 * Filter the query by a related cre8MenuItem object
	 *
	 * @param     cre8MenuItem $cre8MenuItem  the related object to use as filter
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function filterBycre8MenuItem($cre8MenuItem)
	{
		return $this
			->addUsingAlias(cre8ContentPeer::ID, $cre8MenuItem->getContentId(), Criteria::EQUAL);
	}

	/**
	 * Use the cre8MenuItem relation cre8MenuItem object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                  to be used as main alias in the secondary query
	 *
	 * @return    cre8MenuItemQuery A secondary query class using the current class as primary query
	 */
	public function usecre8MenuItemQuery($relationAlias = '')
	{
		return $this
			->join($this->getModelAliasOrName() . '.cre8MenuItem' . ($relationAlias ? ' ' . $relationAlias : ''))
			->useQuery($relationAlias ? $relationAlias : 'cre8MenuItem', 'cre8MenuItemQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     cre8Content $cre8Content Object to remove from the list of results
	 *
	 * @return    cre8ContentQuery The current query, for fluid interface
	 */
	public function prune($cre8Content = null)
	{
		if ($cre8Content) {
			$this->addUsingAlias(cre8ContentPeer::ID, $cre8Content->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

	/**
	 * Code to execute before every SELECT statement
	 * 
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreSelect(PropelPDO $con)
	{
		return $this->preSelect($con);
	}

	/**
	 * Code to execute before every DELETE statement
	 * 
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreDelete(PropelPDO $con)
	{
		return $this->preDelete($con);
	}

	/**
	 * Code to execute before every UPDATE statement
	 * 
	 * @param     array $values The associatiove array of columns and values for the update
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreUpdate(&$values, PropelPDO $con)
	{
		return $this->preUpdate($values, $con);
	}

	// timestampable behavior
	
	/**
	 * Filter by the latest updated
	 *
	 * @param      int $nbDays Maximum age of the latest update in days
	 *
	 * @return     cre8ContentQuery The current query, for fuid interface
	 */
	public function recentlyUpdated($nbDays = 7)
	{
		return $this->addUsingAlias(cre8ContentPeer::UPDATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Filter by the latest created
	 *
	 * @param      int $nbDays Maximum age of in days
	 *
	 * @return     cre8ContentQuery The current query, for fuid interface
	 */
	public function recentlyCreated($nbDays = 7)
	{
		return $this->addUsingAlias(cre8ContentPeer::CREATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Order by update date desc
	 *
	 * @return     cre8ContentQuery The current query, for fuid interface
	 */
	public function lastUpdatedFirst()
	{
		return $this->addDescendingOrderByColumn(cre8ContentPeer::UPDATED_AT);
	}
	
	/**
	 * Order by update date asc
	 *
	 * @return     cre8ContentQuery The current query, for fuid interface
	 */
	public function firstUpdatedFirst()
	{
		return $this->addAscendingOrderByColumn(cre8ContentPeer::UPDATED_AT);
	}
	
	/**
	 * Order by create date desc
	 *
	 * @return     cre8ContentQuery The current query, for fuid interface
	 */
	public function lastCreatedFirst()
	{
		return $this->addDescendingOrderByColumn(cre8ContentPeer::CREATED_AT);
	}
	
	/**
	 * Order by create date asc
	 *
	 * @return     cre8ContentQuery The current query, for fuid interface
	 */
	public function firstCreatedFirst()
	{
		return $this->addAscendingOrderByColumn(cre8ContentPeer::CREATED_AT);
	}

} // Basecre8ContentQuery
