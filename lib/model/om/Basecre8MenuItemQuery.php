<?php


/**
 * Base class that represents a query for the 'cre8_menu_item' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.0-dev on:
 *
 * Å›ro, 27 sty 2010, 13:26:48
 *
 * @method     cre8MenuItemQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     cre8MenuItemQuery orderByLeft($order = Criteria::ASC) Order by the left column
 * @method     cre8MenuItemQuery orderByRight($order = Criteria::ASC) Order by the right column
 * @method     cre8MenuItemQuery orderByTreeLevel($order = Criteria::ASC) Order by the tree_level column
 * @method     cre8MenuItemQuery orderByLabel($order = Criteria::ASC) Order by the label column
 * @method     cre8MenuItemQuery orderByCustomPath($order = Criteria::ASC) Order by the custom_path column
 * @method     cre8MenuItemQuery orderByContentId($order = Criteria::ASC) Order by the content_id column
 * @method     cre8MenuItemQuery orderByIsPrimary($order = Criteria::ASC) Order by the is_primary column
 * @method     cre8MenuItemQuery orderByDatePublished($order = Criteria::ASC) Order by the date_published column
 * @method     cre8MenuItemQuery orderByDeletedAt($order = Criteria::ASC) Order by the deleted_at column
 * @method     cre8MenuItemQuery orderBySlug($order = Criteria::ASC) Order by the slug column
 *
 * @method     cre8MenuItemQuery groupById() Group by the id column
 * @method     cre8MenuItemQuery groupByLeft() Group by the left column
 * @method     cre8MenuItemQuery groupByRight() Group by the right column
 * @method     cre8MenuItemQuery groupByTreeLevel() Group by the tree_level column
 * @method     cre8MenuItemQuery groupByLabel() Group by the label column
 * @method     cre8MenuItemQuery groupByCustomPath() Group by the custom_path column
 * @method     cre8MenuItemQuery groupByContentId() Group by the content_id column
 * @method     cre8MenuItemQuery groupByIsPrimary() Group by the is_primary column
 * @method     cre8MenuItemQuery groupByDatePublished() Group by the date_published column
 * @method     cre8MenuItemQuery groupByDeletedAt() Group by the deleted_at column
 * @method     cre8MenuItemQuery groupBySlug() Group by the slug column
 *
 * @method     cre8MenuItem findOne(PropelPDO $con = null) Return the first cre8MenuItem matching the query
 * @method     cre8MenuItem findOneById(int $id) Return the first cre8MenuItem filtered by the id column
 * @method     cre8MenuItem findOneByLeft(int $left) Return the first cre8MenuItem filtered by the left column
 * @method     cre8MenuItem findOneByRight(int $right) Return the first cre8MenuItem filtered by the right column
 * @method     cre8MenuItem findOneByTreeLevel(int $tree_level) Return the first cre8MenuItem filtered by the tree_level column
 * @method     cre8MenuItem findOneByLabel(string $label) Return the first cre8MenuItem filtered by the label column
 * @method     cre8MenuItem findOneByCustomPath(string $custom_path) Return the first cre8MenuItem filtered by the custom_path column
 * @method     cre8MenuItem findOneByContentId(int $content_id) Return the first cre8MenuItem filtered by the content_id column
 * @method     cre8MenuItem findOneByIsPrimary(boolean $is_primary) Return the first cre8MenuItem filtered by the is_primary column
 * @method     cre8MenuItem findOneByDatePublished(string $date_published) Return the first cre8MenuItem filtered by the date_published column
 * @method     cre8MenuItem findOneByDeletedAt(string $deleted_at) Return the first cre8MenuItem filtered by the deleted_at column
 * @method     cre8MenuItem findOneBySlug(string $slug) Return the first cre8MenuItem filtered by the slug column
 *
 * @method     array findById(int $id) Return cre8MenuItem objects filtered by the id column
 * @method     array findByLeft(int $left) Return cre8MenuItem objects filtered by the left column
 * @method     array findByRight(int $right) Return cre8MenuItem objects filtered by the right column
 * @method     array findByTreeLevel(int $tree_level) Return cre8MenuItem objects filtered by the tree_level column
 * @method     array findByLabel(string $label) Return cre8MenuItem objects filtered by the label column
 * @method     array findByCustomPath(string $custom_path) Return cre8MenuItem objects filtered by the custom_path column
 * @method     array findByContentId(int $content_id) Return cre8MenuItem objects filtered by the content_id column
 * @method     array findByIsPrimary(boolean $is_primary) Return cre8MenuItem objects filtered by the is_primary column
 * @method     array findByDatePublished(string $date_published) Return cre8MenuItem objects filtered by the date_published column
 * @method     array findByDeletedAt(string $deleted_at) Return cre8MenuItem objects filtered by the deleted_at column
 * @method     array findBySlug(string $slug) Return cre8MenuItem objects filtered by the slug column
 *
 * @package    propel.generator.plugins.cre8CmsMenuPlugin.lib.model.om
 */
abstract class Basecre8MenuItemQuery extends ModelCriteria
{

	// soft_delete behavior
	protected static $softDelete = true;
	protected $localSoftDelete = true;

	/**
	 * Initializes internal state of Basecre8MenuItemQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'cre8MenuItem', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($this->getFormatter()->isObjectFormatter() && (null !== ($obj = cre8MenuItemPeer::getInstanceFromPool((string) $key)))) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$this->add(cre8MenuItemPeer::ID, $key, Criteria::EQUAL);
			return $this->findOne($con);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$this->add(cre8MenuItemPeer::ID, $keys, Criteria::IN);
		
		return $this->find($con);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    cre8MenuItemQuery The current query, for fluid interface
	 */
	public function filterById($id = null)
	{
		if (is_array($id)) {
			return $this->addUsingAlias(cre8MenuItemPeer::ID, $id, Criteria::IN);
		} else {
			return $this->addUsingAlias(cre8MenuItemPeer::ID, $id, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the left column
	 * 
	 * @param     int|array $left The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    cre8MenuItemQuery The current query, for fluid interface
	 */
	public function filterByLeft($left = null)
	{
		if (is_array($left)) {
			if (array_values($left) === $left) {
				return $this->addUsingAlias(cre8MenuItemPeer::LEFT, $left, Criteria::IN);
			} else {
				if (isset($left['min'])) {
					$this->addUsingAlias(cre8MenuItemPeer::LEFT, $left['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($left['max'])) {
					$this->addUsingAlias(cre8MenuItemPeer::LEFT, $left['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(cre8MenuItemPeer::LEFT, $left, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the right column
	 * 
	 * @param     int|array $right The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    cre8MenuItemQuery The current query, for fluid interface
	 */
	public function filterByRight($right = null)
	{
		if (is_array($right)) {
			if (array_values($right) === $right) {
				return $this->addUsingAlias(cre8MenuItemPeer::RIGHT, $right, Criteria::IN);
			} else {
				if (isset($right['min'])) {
					$this->addUsingAlias(cre8MenuItemPeer::RIGHT, $right['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($right['max'])) {
					$this->addUsingAlias(cre8MenuItemPeer::RIGHT, $right['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(cre8MenuItemPeer::RIGHT, $right, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the tree_level column
	 * 
	 * @param     int|array $tree_level The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    cre8MenuItemQuery The current query, for fluid interface
	 */
	public function filterByTreeLevel($treeLevel = null)
	{
		if (is_array($treeLevel)) {
			if (array_values($treeLevel) === $treeLevel) {
				return $this->addUsingAlias(cre8MenuItemPeer::TREE_LEVEL, $treeLevel, Criteria::IN);
			} else {
				if (isset($treeLevel['min'])) {
					$this->addUsingAlias(cre8MenuItemPeer::TREE_LEVEL, $treeLevel['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($treeLevel['max'])) {
					$this->addUsingAlias(cre8MenuItemPeer::TREE_LEVEL, $treeLevel['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(cre8MenuItemPeer::TREE_LEVEL, $treeLevel, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the label column
	 * 
	 * @param     string $label The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8MenuItemQuery The current query, for fluid interface
	 */
	public function filterByLabel($label = null)
	{
		if(preg_match('/[\%\*]/', $label)) {
			return $this->addUsingAlias(cre8MenuItemPeer::LABEL, str_replace('*', '%', $label), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8MenuItemPeer::LABEL, $label, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the custom_path column
	 * 
	 * @param     string $custom_path The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8MenuItemQuery The current query, for fluid interface
	 */
	public function filterByCustomPath($customPath = null)
	{
		if(preg_match('/[\%\*]/', $customPath)) {
			return $this->addUsingAlias(cre8MenuItemPeer::CUSTOM_PATH, str_replace('*', '%', $customPath), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8MenuItemPeer::CUSTOM_PATH, $customPath, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the content_id column
	 * 
	 * @param     int|array $content_id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    cre8MenuItemQuery The current query, for fluid interface
	 */
	public function filterByContentId($contentId = null)
	{
		if (is_array($contentId)) {
			if (array_values($contentId) === $contentId) {
				return $this->addUsingAlias(cre8MenuItemPeer::CONTENT_ID, $contentId, Criteria::IN);
			} else {
				if (isset($contentId['min'])) {
					$this->addUsingAlias(cre8MenuItemPeer::CONTENT_ID, $contentId['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($contentId['max'])) {
					$this->addUsingAlias(cre8MenuItemPeer::CONTENT_ID, $contentId['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(cre8MenuItemPeer::CONTENT_ID, $contentId, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the is_primary column
	 * 
	 * @param     boolean|string $isPrimary The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 *
	 * @return    cre8MenuItemQuery The current query, for fluid interface
	 */
	public function filterByIsPrimary($isPrimary = null)
	{
		if(is_string($isPrimary)) {
			$is_primary = in_array(strtolower($isPrimary), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(cre8MenuItemPeer::IS_PRIMARY, $isPrimary, Criteria::EQUAL);
	}

	/**
	 * Filter the query on the date_published column
	 * 
	 * @param     string|array $date_published The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    cre8MenuItemQuery The current query, for fluid interface
	 */
	public function filterByDatePublished($datePublished = null)
	{
		if (is_array($datePublished)) {
			if (array_values($datePublished) === $datePublished) {
				return $this->addUsingAlias(cre8MenuItemPeer::DATE_PUBLISHED, $datePublished, Criteria::IN);
			} else {
				if (isset($datePublished['min'])) {
					$this->addUsingAlias(cre8MenuItemPeer::DATE_PUBLISHED, $datePublished['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($datePublished['max'])) {
					$this->addUsingAlias(cre8MenuItemPeer::DATE_PUBLISHED, $datePublished['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(cre8MenuItemPeer::DATE_PUBLISHED, $datePublished, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the deleted_at column
	 * 
	 * @param     string|array $deleted_at The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    cre8MenuItemQuery The current query, for fluid interface
	 */
	public function filterByDeletedAt($deletedAt = null)
	{
		if (is_array($deletedAt)) {
			if (array_values($deletedAt) === $deletedAt) {
				return $this->addUsingAlias(cre8MenuItemPeer::DELETED_AT, $deletedAt, Criteria::IN);
			} else {
				if (isset($deletedAt['min'])) {
					$this->addUsingAlias(cre8MenuItemPeer::DELETED_AT, $deletedAt['min'], Criteria::GREATER_EQUAL);
				}
				if (isset($deletedAt['max'])) {
					$this->addUsingAlias(cre8MenuItemPeer::DELETED_AT, $deletedAt['max'], Criteria::LESS_EQUAL);
				}
				return $this;	
			}
		} else {
			return $this->addUsingAlias(cre8MenuItemPeer::DELETED_AT, $deletedAt, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the slug column
	 * 
	 * @param     string $slug The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8MenuItemQuery The current query, for fluid interface
	 */
	public function filterBySlug($slug = null)
	{
		if(preg_match('/[\%\*]/', $slug)) {
			return $this->addUsingAlias(cre8MenuItemPeer::SLUG, str_replace('*', '%', $slug), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8MenuItemPeer::SLUG, $slug, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query by a related cre8Content object
	 *
	 * @param     cre8Content $cre8Content  the related object to use as filter
	 *
	 * @return    cre8MenuItemQuery The current query, for fluid interface
	 */
	public function filterBycre8Content($cre8Content)
	{
		return $this
			->addUsingAlias(cre8MenuItemPeer::CONTENT_ID, $cre8Content->getId(), Criteria::EQUAL);
	}

	/**
	 * Use the cre8Content relation cre8Content object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                  to be used as main alias in the secondary query
	 *
	 * @return    cre8ContentQuery A secondary query class using the current class as primary query
	 */
	public function usecre8ContentQuery($relationAlias = '')
	{
		return $this
			->join($this->getModelAliasOrName() . '.cre8Content' . ($relationAlias ? ' ' . $relationAlias : ''))
			->useQuery($relationAlias ? $relationAlias : 'cre8Content', 'cre8ContentQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     cre8MenuItem $cre8MenuItem Object to remove from the list of results
	 *
	 * @return    cre8MenuItemQuery The current query, for fluid interface
	 */
	public function prune($cre8MenuItem = null)
	{
		if ($cre8MenuItem) {
			$this->addUsingAlias(cre8MenuItemPeer::ID, $cre8MenuItem->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

	/**
	 * Code to execute before every SELECT statement
	 * 
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreSelect(PropelPDO $con)
	{
		// soft_delete behavior
		if (cre8MenuItemQuery::isSoftDeleteEnabled() && $this->localSoftDelete) {
			$this->addUsingAlias(cre8MenuItemPeer::DELETED_AT, null, Criteria::ISNULL);
		} else {
			cre8MenuItemPeer::enableSoftDelete();
		}
		return $this->preSelect($con);
	}

	/**
	 * Code to execute before every DELETE statement
	 * 
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreDelete(PropelPDO $con)
	{
		// soft_delete behavior
		if (cre8MenuItemQuery::isSoftDeleteEnabled() && $this->localSoftDelete) {
			return $this->softDelete($con);
		} else {
			return $this->hasWhereClause() ? $this->forceDelete($con) : $this->forceDeleteAll($con);
		}
		return $this->preDelete($con);
	}

	/**
	 * Code to execute before every UPDATE statement
	 * 
	 * @param     array $values The associatiove array of columns and values for the update
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreUpdate(&$values, PropelPDO $con)
	{
		return $this->preUpdate($values, $con);
	}

	// soft_delete behavior
	
	/**
	 * Temporarily disable the filter on deleted rows
	 * Valid only for the current query
	 * 
	 * @see cre8MenuItemQuery::disableSoftDelete() to disable the filter for more than one query
	 *
	 * @return cre8MenuItemQuery The current query, for fuid interface
	 */
	public function includeDeleted()
	{
		$this->localSoftDelete = false;
		return $this;
	}
	
	/**
	 * Soft delete the selected rows
	 *
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    int Number of updated rows
	 */
	public function softDelete(PropelPDO $con = null)
	{
		return $this->update(array('DeletedAt' => time()), $con);
	}
	
	/**
	 * Bypass the soft_delete behavior and force a hard delete of the selected rows
	 *
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    int Number of deleted rows
	 */
	public function forceDelete(PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(cre8MenuItemPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		return $this->doDelete($con);
	}
	
	/**
	 * Bypass the soft_delete behavior and force a hard delete of all the rows
	 *
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    int Number of deleted rows
	 */
	public function forceDeleteAll(PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(cre8MenuItemPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		return $this->doDeleteAll($con);
	}
	
	/**
	 * Undelete selected rows
	 *
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    int The number of rows affected by this update and any referring fk objects' save() operations.
	 */
	public function unDelete(PropelPDO $con = null)
	{
		return $this->update(array('DeletedAt' => null), $con);
	}
		
	/**
	 * Enable the soft_delete behavior for this model
	 */
	public static function enableSoftDelete()
	{
		self::$softDelete = true;
	}
	
	/**
	 * Disable the soft_delete behavior for this model
	 */
	public static function disableSoftDelete()
	{
		self::$softDelete = false;
	}
	
	/**
	 * Check the soft_delete behavior for this model
	 *
	 * @return boolean true if the soft_delete behavior is enabled
	 */
	public static function isSoftDeleteEnabled()
	{
		return self::$softDelete;
	}

	// sluggable behavior
	
	/**
	 * Find one object based on its slug
	 * 
	 * @param     string $slug The value to use as filter.
	 * @param     PropelPDO $con The optional connection object
	 *
	 * @return    cre8MenuItem the result, formatted by the current formatter
	 */
	public function findOneBySlug($slug, $con = null)
	{
		return $this->filterBySlug($slug)->findOne($con);
	}

} // Basecre8MenuItemQuery
