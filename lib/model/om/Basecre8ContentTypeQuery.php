<?php


/**
 * Base class that represents a query for the 'cre8_content_type' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.0-dev on:
 *
 * Å›ro, 27 sty 2010, 13:26:48
 *
 * @method     cre8ContentTypeQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     cre8ContentTypeQuery orderByName($order = Criteria::ASC) Order by the name column
 * @method     cre8ContentTypeQuery orderByDescription($order = Criteria::ASC) Order by the description column
 * @method     cre8ContentTypeQuery orderByLabel($order = Criteria::ASC) Order by the label column
 * @method     cre8ContentTypeQuery orderByPluginName($order = Criteria::ASC) Order by the plugin_name column
 * @method     cre8ContentTypeQuery orderByDefaultPath($order = Criteria::ASC) Order by the default_path column
 * @method     cre8ContentTypeQuery orderByTheme($order = Criteria::ASC) Order by the theme column
 * @method     cre8ContentTypeQuery orderByTemplate($order = Criteria::ASC) Order by the template column
 * @method     cre8ContentTypeQuery orderByModule($order = Criteria::ASC) Order by the module column
 * @method     cre8ContentTypeQuery orderByAction($order = Criteria::ASC) Order by the action column
 * @method     cre8ContentTypeQuery orderBySlug($order = Criteria::ASC) Order by the slug column
 *
 * @method     cre8ContentTypeQuery groupById() Group by the id column
 * @method     cre8ContentTypeQuery groupByName() Group by the name column
 * @method     cre8ContentTypeQuery groupByDescription() Group by the description column
 * @method     cre8ContentTypeQuery groupByLabel() Group by the label column
 * @method     cre8ContentTypeQuery groupByPluginName() Group by the plugin_name column
 * @method     cre8ContentTypeQuery groupByDefaultPath() Group by the default_path column
 * @method     cre8ContentTypeQuery groupByTheme() Group by the theme column
 * @method     cre8ContentTypeQuery groupByTemplate() Group by the template column
 * @method     cre8ContentTypeQuery groupByModule() Group by the module column
 * @method     cre8ContentTypeQuery groupByAction() Group by the action column
 * @method     cre8ContentTypeQuery groupBySlug() Group by the slug column
 *
 * @method     cre8ContentType findOne(PropelPDO $con = null) Return the first cre8ContentType matching the query
 * @method     cre8ContentType findOneById(int $id) Return the first cre8ContentType filtered by the id column
 * @method     cre8ContentType findOneByName(string $name) Return the first cre8ContentType filtered by the name column
 * @method     cre8ContentType findOneByDescription(string $description) Return the first cre8ContentType filtered by the description column
 * @method     cre8ContentType findOneByLabel(string $label) Return the first cre8ContentType filtered by the label column
 * @method     cre8ContentType findOneByPluginName(string $plugin_name) Return the first cre8ContentType filtered by the plugin_name column
 * @method     cre8ContentType findOneByDefaultPath(string $default_path) Return the first cre8ContentType filtered by the default_path column
 * @method     cre8ContentType findOneByTheme(string $theme) Return the first cre8ContentType filtered by the theme column
 * @method     cre8ContentType findOneByTemplate(string $template) Return the first cre8ContentType filtered by the template column
 * @method     cre8ContentType findOneByModule(string $module) Return the first cre8ContentType filtered by the module column
 * @method     cre8ContentType findOneByAction(string $action) Return the first cre8ContentType filtered by the action column
 * @method     cre8ContentType findOneBySlug(string $slug) Return the first cre8ContentType filtered by the slug column
 *
 * @method     array findById(int $id) Return cre8ContentType objects filtered by the id column
 * @method     array findByName(string $name) Return cre8ContentType objects filtered by the name column
 * @method     array findByDescription(string $description) Return cre8ContentType objects filtered by the description column
 * @method     array findByLabel(string $label) Return cre8ContentType objects filtered by the label column
 * @method     array findByPluginName(string $plugin_name) Return cre8ContentType objects filtered by the plugin_name column
 * @method     array findByDefaultPath(string $default_path) Return cre8ContentType objects filtered by the default_path column
 * @method     array findByTheme(string $theme) Return cre8ContentType objects filtered by the theme column
 * @method     array findByTemplate(string $template) Return cre8ContentType objects filtered by the template column
 * @method     array findByModule(string $module) Return cre8ContentType objects filtered by the module column
 * @method     array findByAction(string $action) Return cre8ContentType objects filtered by the action column
 * @method     array findBySlug(string $slug) Return cre8ContentType objects filtered by the slug column
 *
 * @package    propel.generator.plugins.cre8CmsMenuPlugin.lib.model.om
 */
abstract class Basecre8ContentTypeQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of Basecre8ContentTypeQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'cre8ContentType', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($this->getFormatter()->isObjectFormatter() && (null !== ($obj = cre8ContentTypePeer::getInstanceFromPool((string) $key)))) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$this->add(cre8ContentTypePeer::ID, $key, Criteria::EQUAL);
			return $this->findOne($con);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$this->add(cre8ContentTypePeer::ID, $keys, Criteria::IN);
		
		return $this->find($con);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 *
	 * @return    cre8ContentTypeQuery The current query, for fluid interface
	 */
	public function filterById($id = null)
	{
		if (is_array($id)) {
			return $this->addUsingAlias(cre8ContentTypePeer::ID, $id, Criteria::IN);
		} else {
			return $this->addUsingAlias(cre8ContentTypePeer::ID, $id, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the name column
	 * 
	 * @param     string $name The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentTypeQuery The current query, for fluid interface
	 */
	public function filterByName($name = null)
	{
		if(preg_match('/[\%\*]/', $name)) {
			return $this->addUsingAlias(cre8ContentTypePeer::NAME, str_replace('*', '%', $name), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentTypePeer::NAME, $name, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the description column
	 * 
	 * @param     string $description The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentTypeQuery The current query, for fluid interface
	 */
	public function filterByDescription($description = null)
	{
		if(preg_match('/[\%\*]/', $description)) {
			return $this->addUsingAlias(cre8ContentTypePeer::DESCRIPTION, str_replace('*', '%', $description), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentTypePeer::DESCRIPTION, $description, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the label column
	 * 
	 * @param     string $label The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentTypeQuery The current query, for fluid interface
	 */
	public function filterByLabel($label = null)
	{
		if(preg_match('/[\%\*]/', $label)) {
			return $this->addUsingAlias(cre8ContentTypePeer::LABEL, str_replace('*', '%', $label), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentTypePeer::LABEL, $label, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the plugin_name column
	 * 
	 * @param     string $plugin_name The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentTypeQuery The current query, for fluid interface
	 */
	public function filterByPluginName($pluginName = null)
	{
		if(preg_match('/[\%\*]/', $pluginName)) {
			return $this->addUsingAlias(cre8ContentTypePeer::PLUGIN_NAME, str_replace('*', '%', $pluginName), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentTypePeer::PLUGIN_NAME, $pluginName, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the default_path column
	 * 
	 * @param     string $default_path The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentTypeQuery The current query, for fluid interface
	 */
	public function filterByDefaultPath($defaultPath = null)
	{
		if(preg_match('/[\%\*]/', $defaultPath)) {
			return $this->addUsingAlias(cre8ContentTypePeer::DEFAULT_PATH, str_replace('*', '%', $defaultPath), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentTypePeer::DEFAULT_PATH, $defaultPath, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the theme column
	 * 
	 * @param     string $theme The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentTypeQuery The current query, for fluid interface
	 */
	public function filterByTheme($theme = null)
	{
		if(preg_match('/[\%\*]/', $theme)) {
			return $this->addUsingAlias(cre8ContentTypePeer::THEME, str_replace('*', '%', $theme), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentTypePeer::THEME, $theme, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the template column
	 * 
	 * @param     string $template The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentTypeQuery The current query, for fluid interface
	 */
	public function filterByTemplate($template = null)
	{
		if(preg_match('/[\%\*]/', $template)) {
			return $this->addUsingAlias(cre8ContentTypePeer::TEMPLATE, str_replace('*', '%', $template), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentTypePeer::TEMPLATE, $template, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the module column
	 * 
	 * @param     string $module The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentTypeQuery The current query, for fluid interface
	 */
	public function filterByModule($module = null)
	{
		if(preg_match('/[\%\*]/', $module)) {
			return $this->addUsingAlias(cre8ContentTypePeer::MODULE, str_replace('*', '%', $module), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentTypePeer::MODULE, $module, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the action column
	 * 
	 * @param     string $action The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentTypeQuery The current query, for fluid interface
	 */
	public function filterByAction($action = null)
	{
		if(preg_match('/[\%\*]/', $action)) {
			return $this->addUsingAlias(cre8ContentTypePeer::ACTION, str_replace('*', '%', $action), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentTypePeer::ACTION, $action, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query on the slug column
	 * 
	 * @param     string $slug The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 *
	 * @return    cre8ContentTypeQuery The current query, for fluid interface
	 */
	public function filterBySlug($slug = null)
	{
		if(preg_match('/[\%\*]/', $slug)) {
			return $this->addUsingAlias(cre8ContentTypePeer::SLUG, str_replace('*', '%', $slug), Criteria::LIKE);
		} else {
			return $this->addUsingAlias(cre8ContentTypePeer::SLUG, $slug, Criteria::EQUAL);
		}
	}

	/**
	 * Filter the query by a related cre8Content object
	 *
	 * @param     cre8Content $cre8Content  the related object to use as filter
	 *
	 * @return    cre8ContentTypeQuery The current query, for fluid interface
	 */
	public function filterBycre8Content($cre8Content)
	{
		return $this
			->addUsingAlias(cre8ContentTypePeer::ID, $cre8Content->getContentTypeId(), Criteria::EQUAL);
	}

	/**
	 * Use the cre8Content relation cre8Content object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                  to be used as main alias in the secondary query
	 *
	 * @return    cre8ContentQuery A secondary query class using the current class as primary query
	 */
	public function usecre8ContentQuery($relationAlias = '')
	{
		return $this
			->join($this->getModelAliasOrName() . '.cre8Content' . ($relationAlias ? ' ' . $relationAlias : ''))
			->useQuery($relationAlias ? $relationAlias : 'cre8Content', 'cre8ContentQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     cre8ContentType $cre8ContentType Object to remove from the list of results
	 *
	 * @return    cre8ContentTypeQuery The current query, for fluid interface
	 */
	public function prune($cre8ContentType = null)
	{
		if ($cre8ContentType) {
			$this->addUsingAlias(cre8ContentTypePeer::ID, $cre8ContentType->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

	/**
	 * Code to execute before every SELECT statement
	 * 
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreSelect(PropelPDO $con)
	{
		return $this->preSelect($con);
	}

	/**
	 * Code to execute before every DELETE statement
	 * 
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreDelete(PropelPDO $con)
	{
		return $this->preDelete($con);
	}

	/**
	 * Code to execute before every UPDATE statement
	 * 
	 * @param     array $values The associatiove array of columns and values for the update
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreUpdate(&$values, PropelPDO $con)
	{
		return $this->preUpdate($values, $con);
	}

} // Basecre8ContentTypeQuery
